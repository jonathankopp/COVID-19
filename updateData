{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "import OpenBlender\n",
    "import pandas as pd\n",
    "import json\n",
    "import numpy as np\n",
    "import csv\n",
    "from sklearn.mixture import GaussianMixture\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import preprocessing\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.preprocessing import MaxAbsScaler\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.preprocessing import Normalizer\n",
    "from sklearn.preprocessing import QuantileTransformer\n",
    "from sklearn.preprocessing import PowerTransformer\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "from sklearn.metrics import silhouette_samples, silhouette_score\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.feature_selection import VarianceThreshold\n",
    "from time import localtime\n",
    "import datetime\n",
    "from datetime import datetime as dt\n",
    "from matplotlib import pyplot as plt\n",
    "from scipy.spatial.distance import cdist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def retTStamp(l):\n",
    "    ret = []\n",
    "    for i in l:\n",
    "        date_time_obj = datetime.datetime.strptime(i, '%Y-%m-%d %H:%M:%S').replace(minute=0,second=0,hour=0)\n",
    "        ret.append(date_time_obj)\n",
    "    return ret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "data       = pd.read_csv('coronaUTD.csv')\n",
    "input_data = pd.read_csv('csse_covid_19_data/csse_covid_19_daily_reports/04-05-2020.csv')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# reformatting to be the same as current data structure\n",
    "input_data.insert(0,'confirmed',input_data['Confirmed'])\n",
    "input_data.insert(1,'countryregion',input_data['Country_Region'])\n",
    "input_data.insert(2,'deaths',input_data['Deaths'])\n",
    "input_data.insert(3,'latitude',input_data['Lat'])\n",
    "input_data.insert(4,'longitude',input_data['Long_'])\n",
    "input_data.insert(5,'provincestate',input_data['Province_State'])\n",
    "input_data.insert(6,'recovered',input_data['Recovered'])\n",
    "\n",
    "\n",
    "datetime_conver = retTStamp(input_data['Last_Update'])\n",
    "input_data.insert(7,'timestamp',datetime_conver)\n",
    "input_data['timestamp'] = input_data.timestamp.values.astype(np.int64) // 10 ** 9\n",
    "\n",
    "for i,j in input_data.iterrows():\n",
    "    if not type(j['provincestate'])==str:\n",
    "        input_data.at[i,'provincestate'] = j['countryregion']\n",
    "        \n",
    "input_data.drop(['FIPS','Admin2','Active','Combined_Key','Confirmed','Country_Region','Deaths','Lat','Long_','Province_State','Recovered','Last_Update'],axis=1,inplace=True)\n",
    "\n",
    "\n",
    "\n",
    "distinctDates = list(set(list(input_data['timestamp'])))\n",
    "distinctPS    = list(set(list(input_data['provincestate'])))\n",
    "\n",
    "dataHold      = [] \n",
    "for date in distinctDates:\n",
    "    currData = input_data[input_data['timestamp'] == date]\n",
    "    for ps in distinctPS:\n",
    "        specificData   = currData[currData['provincestate'] == ps]\n",
    "        if(len(specificData) == 0):\n",
    "            continue\n",
    "        else:\n",
    "            totalConfirmed = sum(list(specificData['confirmed']))\n",
    "            totalDeaths    = sum(list(specificData['deaths']))\n",
    "            totalrecovered = sum(list(specificData['recovered']))\n",
    "            country        = list(specificData['countryregion'])[0]\n",
    "            lat            = list(specificData['latitude'])[0]\n",
    "            long           = list(specificData['latitude'])[0]\n",
    "            \n",
    "            dataHold.append([totalConfirmed,country,totalDeaths,lat,long,ps,totalrecovered,date])\n",
    "finData = pd.DataFrame(dataHold,columns = ['confirmed','countryregion','deaths','latitude','longitude','provincestate','recovered','timestamp'])\n",
    "# finData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11477\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>confirmed</th>\n",
       "      <th>countryregion</th>\n",
       "      <th>deaths</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>provincestate</th>\n",
       "      <th>recovered</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18.0</td>\n",
       "      <td>US</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.5289</td>\n",
       "      <td>-99.7840</td>\n",
       "      <td>North Dakota</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1584661384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30.0</td>\n",
       "      <td>US</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.3185</td>\n",
       "      <td>-75.5071</td>\n",
       "      <td>Delaware</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1584661384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31.0</td>\n",
       "      <td>US</td>\n",
       "      <td>1.0</td>\n",
       "      <td>38.4561</td>\n",
       "      <td>-92.2884</td>\n",
       "      <td>Missouri</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1584661384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>US</td>\n",
       "      <td>2.0</td>\n",
       "      <td>37.6681</td>\n",
       "      <td>-84.6701</td>\n",
       "      <td>Kentucky</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1584661384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>44.0</td>\n",
       "      <td>US</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.6809</td>\n",
       "      <td>-71.5118</td>\n",
       "      <td>Rhode Island</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1584661384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>117.0</td>\n",
       "      <td>China</td>\n",
       "      <td>1.0</td>\n",
       "      <td>44.0935</td>\n",
       "      <td>44.0935</td>\n",
       "      <td>Inner Mongolia</td>\n",
       "      <td>74.0</td>\n",
       "      <td>1585699200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>310</th>\n",
       "      <td>937.0</td>\n",
       "      <td>China</td>\n",
       "      <td>1.0</td>\n",
       "      <td>27.6140</td>\n",
       "      <td>27.6140</td>\n",
       "      <td>Jiangxi</td>\n",
       "      <td>935.0</td>\n",
       "      <td>1585526400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>311</th>\n",
       "      <td>75.0</td>\n",
       "      <td>China</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37.2692</td>\n",
       "      <td>37.2692</td>\n",
       "      <td>Ningxia</td>\n",
       "      <td>75.0</td>\n",
       "      <td>1584316800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>1.0</td>\n",
       "      <td>China</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31.6927</td>\n",
       "      <td>31.6927</td>\n",
       "      <td>Tibet</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1582416000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>313</th>\n",
       "      <td>18.0</td>\n",
       "      <td>China</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.7452</td>\n",
       "      <td>35.7452</td>\n",
       "      <td>Qinghai</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1582416000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11791 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     confirmed countryregion  deaths  latitude  longitude   provincestate  \\\n",
       "0         18.0            US     0.0   47.5289   -99.7840    North Dakota   \n",
       "1         30.0            US     0.0   39.3185   -75.5071        Delaware   \n",
       "2         31.0            US     1.0   38.4561   -92.2884        Missouri   \n",
       "3         37.0            US     2.0   37.6681   -84.6701        Kentucky   \n",
       "4         44.0            US     0.0   41.6809   -71.5118    Rhode Island   \n",
       "..         ...           ...     ...       ...        ...             ...   \n",
       "309      117.0         China     1.0   44.0935    44.0935  Inner Mongolia   \n",
       "310      937.0         China     1.0   27.6140    27.6140         Jiangxi   \n",
       "311       75.0         China     0.0   37.2692    37.2692         Ningxia   \n",
       "312        1.0         China     0.0   31.6927    31.6927           Tibet   \n",
       "313       18.0         China     0.0   35.7452    35.7452         Qinghai   \n",
       "\n",
       "     recovered   timestamp  \n",
       "0          0.0  1584661384  \n",
       "1          0.0  1584661384  \n",
       "2          0.0  1584661384  \n",
       "3          0.0  1584661384  \n",
       "4          0.0  1584661384  \n",
       "..         ...         ...  \n",
       "309       74.0  1585699200  \n",
       "310      935.0  1585526400  \n",
       "311       75.0  1584316800  \n",
       "312        1.0  1582416000  \n",
       "313       18.0  1582416000  \n",
       "\n",
       "[11791 rows x 8 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(len(data))\n",
    "data = data.append(finData)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"coronaUTD.csv\",\"w\",newline=\"\\n\") as f:\n",
    "    data.to_csv(f,index=False,sep=\",\",header = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
